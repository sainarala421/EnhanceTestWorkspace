#!/usr/bin/env groovy
/*
 * This Jenkinsfile is intended to run on https://ci.jenkins.io and may fail anywhere else.
 * It makes assumptions about plugins being installed, labels mapping to nodes that can build what is needed, etc.
 *
 * The required labels are "java" and "docker" - "java" would be any node that can run Java builds. It doesn't need
 * to have Java installed, but some setups may have nodes that shouldn't have heavier builds running on them, so we
 * make this explicit. "docker" would be any node with docker installed.
 */

 pipeline {
    agent {
        label 'master'
    }
    /* environment {
        ADMIN_USER = credentials('admin-user')
    } */
    stages {
        stage ("Stage 1: Get Agent details") {
            steps {
                sh '''#!/bin/bash
                    python --version
                    whoami
                    sw_vers
                    pwd
                    ls -l
                '''
            }
        }
        stage ("Stage 2: Run robot tests") {
            environment {
                PATH        = "${PATH}:/usr/local/bin/chromedriver"
                AWS_ENABLED = 0
            }
            steps {
                sh '''#!/bin/bash
                    ls -l
                    pwd
                    pybot --version
                    pybot --argumentfile EnhanceWorkspace/Mercury/argument_file.txt -i MercuryAboutPageAvailabilityTest .
                '''
            }
        }
        stage ('Analysis') {
            steps {
                // def scannerLoc = tool '/etc/sonar-scanner-3.2.0.1227-macosx';
                withSonarQubeEnv('Local SonarQube') {
                    sh "/etc/sonar-scanner-3.2.0.1227-macosx/bin/sonar-scanner"
                } 
                /*
                script {
                    timeout(time:5, unit:'MINUTES') {
                        def qg = waitForQualityGate();
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    } 

                    def scannerLoc = tool '/etc/sonar-scanner-3.2.0.1227-macosx';
                    withSonarQubeEnv('Local SonarQube') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    } 
                    /*
                    def scannerHome = tool 'SonarQube Scanner 2.8';
                    withSonarQubeEnv('My SonarQube Server') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    } 
                }*/
            }
        }
    }
    post {
        always {
            /* mail to:"agundayfrancis@gmail.com",
                subject:"STATUS FOR PROJECT: ${currentBuild.fullDisplayName}",
                body: "RESULT: ${currentBuild.result}" */
            script{
                try{
                    echo "Send notifications for result: ${currentBuild.result}"

                    } catch(e) {
                        echo "Send notifications for result: ${currentBuild.result}"
                        step([
                            $class: 'RobotPublisher',
                            outputPath: '.',
                            passThreshold: 0,
                            unstableThreshold: 0,
                            otherFiles: "**/*.png"
                        ])
                        throw e
                    }

            }
        }
    }

 }
